import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
const ProductSpecifications = ({ specifications = {}, dimensions, weight, isDigital = false, attributes = [], sku, brand, }) => {
    return (_jsxs("div", { className: "py-6", children: [_jsx("div", { className: "border border-gray-200 rounded-lg overflow-hidden", children: _jsx("table", { className: "w-full text-sm", children: _jsxs("tbody", { children: [brand && (_jsxs("tr", { className: "border-b border-gray-200", children: [_jsx("th", { className: "text-left bg-gray-50 px-6 py-3 text-gray-600 font-medium w-1/3", children: "Brand" }), _jsx("td", { className: "px-6 py-3 text-gray-800", children: brand })] })), _jsxs("tr", { className: "border-b border-gray-200", children: [_jsx("th", { className: "text-left bg-gray-50 px-6 py-3 text-gray-600 font-medium w-1/3", children: "SKU" }), _jsx("td", { className: "px-6 py-3 text-gray-800", children: sku })] }), _jsxs("tr", { className: "border-b border-gray-200", children: [_jsx("th", { className: "text-left bg-gray-50 px-6 py-3 text-gray-600 font-medium w-1/3", children: "Product Type" }), _jsx("td", { className: "px-6 py-3 text-gray-800", children: isDigital ? "Digital Product" : "Physical Product" })] }), !isDigital && dimensions && (_jsxs("tr", { className: "border-b border-gray-200", children: [_jsx("th", { className: "text-left bg-gray-50 px-6 py-3 text-gray-600 font-medium w-1/3", children: "Dimensions (W \u00D7 H \u00D7 L)" }), _jsxs("td", { className: "px-6 py-3 text-gray-800", children: [dimensions.width, " \u00D7 ", dimensions.height, " \u00D7 ", dimensions.length, " cm"] })] })), !isDigital && weight !== undefined && (_jsxs("tr", { className: "border-b border-gray-200", children: [_jsx("th", { className: "text-left bg-gray-50 px-6 py-3 text-gray-600 font-medium w-1/3", children: "Weight" }), _jsxs("td", { className: "px-6 py-3 text-gray-800", children: [weight, " g"] })] })), attributes.map((attr, index) => (_jsxs("tr", { className: "border-b border-gray-200", children: [_jsx("th", { className: "text-left bg-gray-50 px-6 py-3 text-gray-600 font-medium w-1/3", children: attr.name }), _jsx("td", { className: "px-6 py-3 text-gray-800", children: attr.value })] }, index))), Object.entries(specifications).map(([key, value]) => {
                                // Skip rendering if value is an object (handle it differently)
                                if (typeof value === 'object' && value !== null)
                                    return null;
                                return (_jsxs("tr", { className: "border-b border-gray-200", children: [_jsx("th", { className: "text-left bg-gray-50 px-6 py-3 text-gray-600 font-medium w-1/3", children: key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()) }), _jsx("td", { className: "px-6 py-3 text-gray-800", children: typeof value === 'boolean' ? (value ? 'Yes' : 'No') : value.toString() })] }, key));
                            })] }) }) }), Object.entries(specifications).some(([_, value]) => typeof value === 'object' && value !== null) && (_jsxs("div", { className: "mt-8", children: [_jsx("h3", { className: "text-lg font-medium text-gray-800 mb-4", children: "Technical Specifications" }), _jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: Object.entries(specifications).map(([key, value]) => {
                            if (typeof value !== 'object' || value === null)
                                return null;
                            return (_jsxs("div", { className: "border border-gray-200 rounded-lg p-4", children: [_jsx("h4", { className: "font-medium mb-2 text-gray-700", children: key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()) }), _jsx("ul", { className: "space-y-2", children: Object.entries(value).map(([subKey, subValue]) => (_jsxs("li", { className: "flex justify-between text-sm", children: [_jsx("span", { className: "text-gray-600", children: subKey.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()) }), _jsx("span", { className: "font-medium text-gray-800", children: typeof subValue === 'boolean' ? (subValue ? 'Yes' : 'No') : subValue.toString() })] }, subKey))) })] }, key));
                        }) })] }))] }));
};
export default ProductSpecifications;
